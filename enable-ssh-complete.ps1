# enable-ssh-complete.ps1
# ------------------------------------------
# Configuraci√≥n completa de SSH en Windows 10/11
# Incluye: instalaci√≥n, usuario, contrase√±a y configuraci√≥n
# EJECUTAR COMO ADMINISTRADOR
# ------------------------------------------

param(
    [string]$UsuarioSSH = "sshremoto",
    [string]$PasswordSSH = "",
    [string]$NombreMiniPC = ""
)

Write-Host "üîß Iniciando configuraci√≥n completa de SSH..." -ForegroundColor Green

# Paso 1: Instalar OpenSSH Server
Write-Host "`nüì¶ Instalando OpenSSH Server..."
try {
    Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
    Write-Host "‚úÖ OpenSSH Server instalado correctamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error instalando OpenSSH: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Paso 2: Iniciar y configurar el servicio
Write-Host "`nüöÄ Configurando servicio SSH..."
Start-Service sshd
Set-Service -Name sshd -StartupType 'Automatic'
Write-Host "‚úÖ Servicio SSH iniciado y configurado para inicio autom√°tico" -ForegroundColor Green

# Paso 3: Configurar Firewall
Write-Host "`nüî• Configurando Firewall de Windows..."
try {
    New-NetFirewallRule -Name "SSH-Inbound" -DisplayName "SSH Server (Puerto 22)" `
        -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
    Write-Host "‚úÖ Puerto 22 abierto en el Firewall" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Regla de firewall ya existe o error: $($_.Exception.Message)" -ForegroundColor Yellow
}

# Paso 4: Generar contrase√±a segura si no se proporcion√≥
if ([string]::IsNullOrEmpty($PasswordSSH)) {
    $PasswordSSH = -join ((33..126) | Get-Random -Count 12 | ForEach-Object {[char]$_})
    Write-Host "üîê Contrase√±a generada autom√°ticamente" -ForegroundColor Cyan
}

# Paso 5: Crear usuario SSH dedicado
Write-Host "`nüë§ Creando usuario SSH: $UsuarioSSH"
try {
    # Verificar si el usuario ya existe
    $existeUsuario = Get-LocalUser -Name $UsuarioSSH -ErrorAction SilentlyContinue
    if ($existeUsuario) {
        Write-Host "‚ö†Ô∏è Usuario $UsuarioSSH ya existe, actualizando contrase√±a..." -ForegroundColor Yellow
        $SecurePassword = ConvertTo-SecureString $PasswordSSH -AsPlainText -Force
        Set-LocalUser -Name $UsuarioSSH -Password $SecurePassword
    } else {
        $SecurePassword = ConvertTo-SecureString $PasswordSSH -AsPlainText -Force
        New-LocalUser -Name $UsuarioSSH -Password $SecurePassword -Description "Usuario SSH para gesti√≥n remota"
        Write-Host "‚úÖ Usuario $UsuarioSSH creado correctamente" -ForegroundColor Green
    }
    
    # Agregar usuario al grupo de administradores locales
    Add-LocalGroupMember -Group "Administradores" -Member $UsuarioSSH -ErrorAction SilentlyContinue
    Write-Host "‚úÖ Usuario agregado al grupo Administradores" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå Error creando usuario: $($_.Exception.Message)" -ForegroundColor Red
}

# Paso 6: Obtener informaci√≥n del sistema
Write-Host "`nüìã Recopilando informaci√≥n del sistema..."
$InfoSistema = @{
    NombreEquipo = if ([string]::IsNullOrEmpty($NombreMiniPC)) { $env:COMPUTERNAME } else { $NombreMiniPC }
    IPPrivada = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.InterfaceAlias -notlike "*Loopback*"} | Select-Object -First 1).IPAddress
    UsuarioSSH = $UsuarioSSH
    PasswordSSH = $PasswordSSH
    Puerto = 22
    FechaConfiguracion = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
}

# Paso 7: Obtener IP p√∫blica
Write-Host "üåê Obteniendo IP p√∫blica..."
try {
    $IPPublica = Invoke-RestMethod -Uri "https://api.ipify.org" -TimeoutSec 10
    $InfoSistema.IPPublica = $IPPublica
    Write-Host "‚úÖ IP P√∫blica: $IPPublica" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è No se pudo obtener IP p√∫blica autom√°ticamente" -ForegroundColor Yellow
    $InfoSistema.IPPublica = "Verificar manualmente"
}

# Paso 8: Verificar estado del servicio
Write-Host "`nüîç Verificando configuraci√≥n..."
$EstadoSSH = Get-Service sshd
Write-Host "üìä Estado del servicio SSH: $($EstadoSSH.Status)" -ForegroundColor Cyan

# Paso 9: Generar archivo de credenciales para enviar al headquarter
$CredencialesJSON = $InfoSistema | ConvertTo-Json -Depth 2
$ArchivoCredenciales = "ssh-credentials-$($InfoSistema.NombreEquipo).json"
$CredencialesJSON | Out-File -FilePath $ArchivoCredenciales -Encoding UTF8

Write-Host "`nüìÑ Archivo de credenciales generado: $ArchivoCredenciales" -ForegroundColor Green

# Paso 10: Mostrar resumen de configuraci√≥n
Write-Host "`n" + "="*60 -ForegroundColor Cyan
Write-Host "üéâ CONFIGURACI√ìN SSH COMPLETADA" -ForegroundColor Green
Write-Host "="*60 -ForegroundColor Cyan
Write-Host "üìç Nombre del Equipo: $($InfoSistema.NombreEquipo)" -ForegroundColor White
Write-Host "üåê IP P√∫blica: $($InfoSistema.IPPublica)" -ForegroundColor White
Write-Host "üè† IP Privada: $($InfoSistema.IPPrivada)" -ForegroundColor White
Write-Host "üë§ Usuario SSH: $($InfoSistema.UsuarioSSH)" -ForegroundColor White
Write-Host "üîê Contrase√±a: $($InfoSistema.PasswordSSH)" -ForegroundColor Yellow
Write-Host "üö™ Puerto: $($InfoSistema.Puerto)" -ForegroundColor White
Write-Host "üìÖ Configurado: $($InfoSistema.FechaConfiguracion)" -ForegroundColor White
Write-Host "="*60 -ForegroundColor Cyan

# Paso 11: Comando de conexi√≥n para copiar
$ComandoConexion = "ssh $($InfoSistema.UsuarioSSH)@$($InfoSistema.IPPublica)"
Write-Host "`nüìã COMANDO PARA CONECTAR DESDE HEADQUARTER:" -ForegroundColor Cyan
Write-Host $ComandoConexion -ForegroundColor Yellow

Write-Host "`nüì§ ENVIAR ARCHIVO AL HEADQUARTER:" -ForegroundColor Cyan
Write-Host "Archivo generado: $ArchivoCredenciales" -ForegroundColor Yellow
Write-Host "Contenido a enviar por email/Teams/Slack:" -ForegroundColor Gray
Write-Host $CredencialesJSON -ForegroundColor Gray

Write-Host "`n‚úÖ Configuraci√≥n completada. El MiniPC est√° listo para gesti√≥n remota." -ForegroundColor Green
